#!/usr/bin/env python3
"""
Environment Setup Script for NEXA Game Recommender
This script helps users create their .env file with the required API keys.
"""

import os
import sys

def create_env_file():
    """Create a .env file with user input"""
    
    print("🎮 NEXA Game Recommender - Environment Setup")
    print("=" * 50)
    print("This script will help you create a .env file with your API keys.")
    print("You can get these API keys from the following sources:")
    print()
    print("📋 Required API Keys:")
    print("1. OpenAI API Key: https://platform.openai.com/api-keys")
    print("2. RAWG API Key: https://rawg.io/apidocs")
    print("3. Twitch Client ID: https://dev.twitch.tv/console")
    print("4. Twitch Client Secret: https://dev.twitch.tv/console")
    print()
    
    # Check if .env already exists
    if os.path.exists('.env'):
        response = input("⚠️  .env file already exists. Do you want to overwrite it? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return
    
    # Get API keys from user
    print("Please enter your API keys:")
    print()
    
    openai_key = input("🔑 OpenAI API Key: ").strip()
    rawg_key = input("🎮 RAWG API Key: ").strip()
    twitch_client_id = input("📺 Twitch Client ID: ").strip()
    twitch_client_secret = input("🔐 Twitch Client Secret: ").strip()
    
    # Optional IGDB keys
    print()
    print("📋 Optional API Keys (press Enter to skip):")
    igdb_client_id = input("🎯 IGDB Client ID (optional): ").strip()
    igdb_client_secret = input("🔐 IGDB Client Secret (optional): ").strip()
    
    # Create .env content
    env_content = f"""# NEXA Game Recommender Environment Variables
# Generated by setup_env.py

# OpenAI API Configuration
OPENAI_API_KEY={openai_key}

# RAWG API Configuration
RAWG_API_KEY={rawg_key}

# Twitch API Configuration
TWITCH_CLIENT_ID={twitch_client_id}
TWITCH_CLIENT_SECRET={twitch_client_secret}

# IGDB API Configuration (Optional)
"""
    
    if igdb_client_id:
        env_content += f"IGDB_CLIENT_ID={igdb_client_id}\n"
    if igdb_client_secret:
        env_content += f"IGDB_CLIENT_SECRET={igdb_client_secret}\n"
    
    env_content += """
# Application Configuration
PORT=8000
NODE_ENV=development

# CORS Configuration (for development)
CORS_ORIGINS=http://localhost:3000,https://localhost:3000

# Rate Limiting Configuration
RATE_LIMIT_PER_MINUTE=60

# Logging Configuration
LOG_LEVEL=info
"""
    
    # Write to .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print()
        print("✅ .env file created successfully!")
        print("📁 File location: .env")
        print()
        print("🚀 Next steps:")
        print("1. Install dependencies: pip install -r requirements.txt && npm install")
        print("2. Start the application: npm run start")
        print("3. Open your browser to: http://localhost:3000")
        print()
        print("🌐 Live Demo: https://nexa-pro.up.railway.app")
        
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")
        sys.exit(1)

def validate_env_file():
    """Validate that all required environment variables are set"""
    
    if not os.path.exists('.env'):
        print("❌ .env file not found. Run 'python setup_env.py' to create it.")
        return False
    
    required_vars = [
        'OPENAI_API_KEY',
        'RAWG_API_KEY', 
        'TWITCH_CLIENT_ID',
        'TWITCH_CLIENT_SECRET'
    ]
    
    missing_vars = []
    
    # Load environment variables from .env file
    with open('.env', 'r') as f:
        for line in f:
            if '=' in line and not line.startswith('#'):
                key, value = line.strip().split('=', 1)
                os.environ[key] = value
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"❌ Missing required environment variables: {', '.join(missing_vars)}")
        print("Run 'python setup_env.py' to set them up.")
        return False
    
    print("✅ All required environment variables are set!")
    return True

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "validate":
        validate_env_file()
    else:
        create_env_file() 